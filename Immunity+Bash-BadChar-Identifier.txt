This is designed to parse text from the Immunity debugger's memory dump pane, and assumes we are fuzzing with Python.


Iterate through the following process to determine bad chars

1) in python, create our list of good chars. We will then remove items from this list as we see that they are interpreted, and therefore
"bad chars". We begin by assuming no bad chars, meaning we fuzz with all chars from \x00 to \xff sequentially and contiguously. 
\x00 is safe to drop usually, but for the sake of not skipping steps, I keep it until verifying with my own eyes that 
it's interpreted:
goodChars = ''.join(chr(c) for c in xrange(256))  # this list will get smaller as we test

2)Next, attach immunity to the application and fuzz until crash. Be sure 
`goodchars` is sent and that you can find it in the Dump pane.


3)In the  Immunity Dump pane, highlight all members of `goodchars` you can find.
This will be an unbroken highlight of up to 256 chars.  Right click and copy. 
Paste it into /tmp/ImmunityDumpRawPaste on your Kali/Nix box. (use a pastebin if you lack a shared clipboard)

4)Run the following to determine which characters are missing from your paste:
cat /tmp/ImmunityDumpRawPaste | cut -d " " -f 2-10 >/tmp/ImmunityBcharDump; for i in {0..255}; do echo "\x"$(printf "%02x" $i) >> /tmp/Workfile ; grep -c -i $(printf "%02x" $i) /tmp/ImmunityBcharDump >>/tmp/Workfile | grep -B1 "^0$" /tmp/Workfile; done |sort -u && rm /tmp/Workfile && rm /tmp/ImmunityBcharDump

5) Go back to the python fuzzing script and remove the first character that is found to be missing. If on your first run 
you notice that \x01 and \x02 are the only two items missing, do not remove both. Remove \x01 first. Sometimes a single bad char
can take out multiple good chars behind it. Hence remove one bad char at a time.

#back in our python fuzzing script:
goodchars = goodchars.replace("\x00","") 

6) repeat this process until you have identified all bad chars. 

7) Craft your shellcode with msfvenom and using the -b flag, pass in all of the bad chars identified with this process
